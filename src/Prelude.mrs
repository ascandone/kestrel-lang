extern pub type Int

extern pub type Float

extern pub type String

pub(..) type Bool {
  True,
  False,  
}

pub(..) type Unit {
  Unit
}

extern pub let (+): Fn(Int, Int) -> Int
extern pub let (+.): Fn(Float, Float) -> Float

extern pub let (-): Fn(Int, Int) -> Int
extern pub let (-.): Fn(Float, Float) -> Float

extern pub let (*): Fn(Int, Int) -> Int
extern pub let (*.): Fn(Float, Float) -> Float

extern pub let (/): Fn(Int, Int) -> Int
extern pub let (/.): Fn(Float, Float) -> Float

extern pub let (^): Fn(Int, Int) -> Int

extern pub let (%): Fn(Int, Int) -> Int


extern pub let (&&): Fn(Bool, Bool) -> Bool
extern pub let (||): Fn(Bool, Bool) -> Bool

extern pub let (!): Fn(Bool) -> Bool


extern pub let (==): Fn(a, a) -> Bool
extern pub let (!=): Fn(a, a) -> Bool
extern pub let (>): Fn(a, a) -> Bool
extern pub let (>=): Fn(a, a) -> Bool
extern pub let (<): Fn(a, a) -> Bool
extern pub let (<=): Fn(a, a) -> Bool


extern pub let (<>): Fn(String, String) -> String

extern pub let int_to_string: Fn(Int) -> String

pub(..) type Maybe<a> {
  Just(a),
  Nothing,
}

pub(..) type Result<a, err> {
  Ok(a),
  Err(err)
}

pub(..) type Tuple2<a, b> {
  Tuple2(a, b)
}

pub(..) type Tuple3<a, b, c> {
  Tuple3(a, b, c)
}

pub(..) type Tuple4<a, b, c, d> {
  Tuple4(a, b, c, d)
}

pub(..) type List<a> {
  Nil,
  Cons(a, List<a>),
}

extern pub type Task<a>

extern pub let task_of: Fn(a) -> Task<a>

extern pub let await: Fn(Task<a>, Fn(a) -> Task<b>) -> Task<b>

extern pub let println: Fn(String) -> Task<Unit>
extern pub let print: Fn(String) -> Task<Unit>

extern pub let readline: Task<String>

extern pub let sleep: Fn(Int) -> Task<Unit>
