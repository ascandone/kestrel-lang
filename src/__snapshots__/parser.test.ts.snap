// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`extern bindings > let decls 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          18,
          19,
        ],
      },
      "extern": true,
      "span": [
        7,
        24,
      ],
      "typeHint": {
        "args": [],
        "name": "Int",
        "span": [
          21,
          24,
        ],
        "type": "named",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`extern bindings > let decls defining infix operators 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": ">=>",
        "span": [
          18,
          23,
        ],
      },
      "extern": true,
      "span": [
        7,
        36,
      ],
      "typeHint": {
        "args": [],
        "name": "ExampleType",
        "span": [
          25,
          36,
        ],
        "type": "named",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`extern bindings > types 1`] = `
{
  "declarations": [],
  "typeDeclarations": [
    {
      "name": "T",
      "params": [],
      "span": [
        7,
        20,
      ],
      "type": "extern",
    },
  ],
}
`;

exports[`it should be possible to mix pipe with infix 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          9,
          10,
        ],
      },
      "extern": false,
      "span": [
        5,
        32,
      ],
      "value": {
        "args": [
          {
            "args": [
              {
                "args": [
                  {
                    "span": [
                      13,
                      14,
                    ],
                    "type": "constant",
                    "value": {
                      "type": "int",
                      "value": 1,
                    },
                  },
                  {
                    "span": [
                      17,
                      18,
                    ],
                    "type": "constant",
                    "value": {
                      "type": "int",
                      "value": 2,
                    },
                  },
                ],
                "caller": {
                  "name": "+",
                  "span": [
                    15,
                    16,
                  ],
                  "type": "identifier",
                },
                "span": [
                  13,
                  18,
                ],
                "type": "application",
              },
            ],
            "caller": {
              "name": "f",
              "span": [
                22,
                23,
              ],
              "type": "identifier",
            },
            "span": [
              13,
              25,
            ],
            "type": "application",
          },
        ],
        "caller": {
          "name": "g",
          "span": [
            29,
            30,
          ],
          "type": "identifier",
        },
        "span": [
          13,
          32,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`monadic let syntax sugar 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          9,
          10,
        ],
      },
      "extern": false,
      "span": [
        5,
        58,
      ],
      "value": {
        "args": [
          {
            "name": "expr",
            "span": [
              36,
              40,
            ],
            "type": "identifier",
          },
          {
            "body": {
              "name": "body",
              "span": [
                48,
                52,
              ],
              "type": "identifier",
            },
            "params": [
              {
                "name": "x",
                "span": [
                  32,
                  33,
                ],
              },
            ],
            "span": [
              21,
              52,
            ],
            "type": "fn",
          },
        ],
        "caller": {
          "name": "bind_f",
          "span": [
            25,
            31,
          ],
          "type": "identifier",
        },
        "span": [
          21,
          52,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse * expr 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        13,
      ],
      "value": {
        "args": [
          {
            "span": [
              8,
              9,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
          {
            "span": [
              12,
              13,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 2,
            },
          },
        ],
        "caller": {
          "name": "*",
          "span": [
            10,
            11,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          13,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse + and * prec 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        17,
      ],
      "value": {
        "args": [
          {
            "span": [
              8,
              9,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
          {
            "args": [
              {
                "span": [
                  12,
                  13,
                ],
                "type": "constant",
                "value": {
                  "type": "int",
                  "value": 2,
                },
              },
              {
                "span": [
                  16,
                  17,
                ],
                "type": "constant",
                "value": {
                  "type": "int",
                  "value": 3,
                },
              },
            ],
            "caller": {
              "name": "*",
              "span": [
                14,
                15,
              ],
              "type": "identifier",
            },
            "span": [
              12,
              17,
            ],
            "type": "application",
          },
        ],
        "caller": {
          "name": "-",
          "span": [
            10,
            11,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          17,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse + and * prec with parens 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        19,
      ],
      "value": {
        "args": [
          {
            "args": [
              {
                "span": [
                  9,
                  10,
                ],
                "type": "constant",
                "value": {
                  "type": "int",
                  "value": 1,
                },
              },
              {
                "span": [
                  13,
                  14,
                ],
                "type": "constant",
                "value": {
                  "type": "int",
                  "value": 2,
                },
              },
            ],
            "caller": {
              "name": "-",
              "span": [
                11,
                12,
              ],
              "type": "identifier",
            },
            "span": [
              9,
              14,
            ],
            "type": "application",
          },
          {
            "span": [
              18,
              19,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 3,
            },
          },
        ],
        "caller": {
          "name": "*",
          "span": [
            16,
            17,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          19,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse + expr 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        13,
      ],
      "value": {
        "args": [
          {
            "span": [
              8,
              9,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
          {
            "span": [
              12,
              13,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 2,
            },
          },
        ],
        "caller": {
          "name": "+",
          "span": [
            10,
            11,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          13,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse +. expr 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        14,
      ],
      "value": {
        "args": [
          {
            "span": [
              8,
              9,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
          {
            "span": [
              13,
              14,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 2,
            },
          },
        ],
        "caller": {
          "name": "+.",
          "span": [
            10,
            12,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          14,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse - expr 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        13,
      ],
      "value": {
        "args": [
          {
            "span": [
              8,
              9,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
          {
            "span": [
              12,
              13,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 2,
            },
          },
        ],
        "caller": {
          "name": "-",
          "span": [
            10,
            11,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          13,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse appl with 1 arg 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        12,
      ],
      "value": {
        "args": [
          {
            "name": "x",
            "span": [
              10,
              11,
            ],
            "type": "identifier",
          },
        ],
        "caller": {
          "name": "f",
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          12,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse appl with 3 args 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        18,
      ],
      "value": {
        "args": [
          {
            "name": "x",
            "span": [
              10,
              11,
            ],
            "type": "identifier",
          },
          {
            "name": "y",
            "span": [
              13,
              14,
            ],
            "type": "identifier",
          },
          {
            "name": "z",
            "span": [
              16,
              17,
            ],
            "type": "identifier",
          },
        ],
        "caller": {
          "name": "f",
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          18,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse appl with nested expr 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        16,
      ],
      "value": {
        "args": [
          {
            "args": [
              {
                "span": [
                  10,
                  11,
                ],
                "type": "constant",
                "value": {
                  "type": "int",
                  "value": 1,
                },
              },
              {
                "span": [
                  14,
                  15,
                ],
                "type": "constant",
                "value": {
                  "type": "int",
                  "value": 2,
                },
              },
            ],
            "caller": {
              "name": "+",
              "span": [
                12,
                13,
              ],
              "type": "identifier",
            },
            "span": [
              10,
              15,
            ],
            "type": "application",
          },
        ],
        "caller": {
          "name": "f",
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          16,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse appl with nested parens 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        14,
      ],
      "value": {
        "args": [
          {
            "span": [
              11,
              12,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
        ],
        "caller": {
          "name": "f",
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          14,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse appl with no args 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        11,
      ],
      "value": {
        "args": [],
        "caller": {
          "name": "f",
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          11,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse appl with trailing comma 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        28,
      ],
      "value": {
        "args": [
          {
            "name": "x",
            "span": [
              15,
              16,
            ],
            "type": "identifier",
          },
          {
            "name": "y",
            "span": [
              22,
              23,
            ],
            "type": "identifier",
          },
        ],
        "caller": {
          "name": "f",
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          28,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse block with no let 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "extern": false,
      "span": [
        1,
        14,
      ],
      "value": {
        "span": [
          11,
          12,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 1,
        },
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse cons operator is right-associative 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        21,
      ],
      "value": {
        "args": [
          {
            "name": "a",
            "span": [
              8,
              9,
            ],
            "type": "identifier",
          },
          {
            "args": [
              {
                "name": "b",
                "span": [
                  13,
                  14,
                ],
                "type": "identifier",
              },
              {
                "name": "Nil",
                "span": [
                  18,
                  21,
                ],
                "type": "identifier",
              },
            ],
            "caller": {
              "name": "Cons",
              "span": [
                15,
                17,
              ],
              "type": "identifier",
            },
            "span": [
              13,
              21,
            ],
            "type": "application",
          },
        ],
        "caller": {
          "name": "Cons",
          "span": [
            10,
            12,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          21,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse conslist sugar 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        16,
      ],
      "value": {
        "args": [
          {
            "name": "hd",
            "span": [
              8,
              10,
            ],
            "type": "identifier",
          },
          {
            "name": "tl",
            "span": [
              14,
              16,
            ],
            "type": "identifier",
          },
        ],
        "caller": {
          "name": "Cons",
          "span": [
            11,
            13,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          16,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse empty strings 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        10,
      ],
      "value": {
        "span": [
          8,
          10,
        ],
        "type": "constant",
        "value": {
          "type": "string",
          "value": "",
        },
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse float 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        12,
      ],
      "value": {
        "span": [
          8,
          12,
        ],
        "type": "constant",
        "value": {
          "type": "float",
          "value": 1.23,
        },
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse fn with 1 arg 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "extern": false,
      "span": [
        1,
        19,
      ],
      "value": {
        "body": {
          "span": [
            16,
            17,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 0,
          },
        },
        "params": [
          {
            "name": "x",
            "span": [
              12,
              13,
            ],
          },
        ],
        "span": [
          9,
          19,
        ],
        "type": "fn",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse fn with 2 args 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "extern": false,
      "span": [
        1,
        22,
      ],
      "value": {
        "body": {
          "span": [
            19,
            20,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 0,
          },
        },
        "params": [
          {
            "name": "x",
            "span": [
              12,
              13,
            ],
          },
          {
            "name": "y",
            "span": [
              15,
              16,
            ],
          },
        ],
        "span": [
          9,
          22,
        ],
        "type": "fn",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse fn with let 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "extern": false,
      "span": [
        1,
        32,
      ],
      "value": {
        "body": {
          "binding": {
            "name": "x",
            "span": [
              20,
              21,
            ],
          },
          "body": {
            "span": [
              29,
              30,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
          "span": [
            16,
            30,
          ],
          "type": "let",
          "value": {
            "span": [
              24,
              25,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 0,
            },
          },
        },
        "params": [],
        "span": [
          9,
          32,
        ],
        "type": "fn",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse fn with no args 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "extern": false,
      "span": [
        1,
        17,
      ],
      "value": {
        "body": {
          "span": [
            14,
            15,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 0,
          },
        },
        "params": [],
        "span": [
          9,
          17,
        ],
        "type": "fn",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse ident 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        9,
      ],
      "value": {
        "name": "x",
        "span": [
          8,
          9,
        ],
        "type": "identifier",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse if expr 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "extern": false,
      "span": [
        1,
        30,
      ],
      "value": {
        "condition": {
          "name": "b",
          "span": [
            12,
            13,
          ],
          "type": "identifier",
        },
        "else": {
          "span": [
            27,
            28,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 1,
          },
        },
        "span": [
          9,
          30,
        ],
        "then": {
          "span": [
            16,
            17,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 0,
          },
        },
        "type": "if",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse if expr with a let expr 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "extern": false,
      "span": [
        1,
        47,
      ],
      "value": {
        "condition": {
          "name": "b",
          "span": [
            12,
            13,
          ],
          "type": "identifier",
        },
        "else": {
          "span": [
            44,
            45,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 1,
          },
        },
        "span": [
          9,
          47,
        ],
        "then": {
          "binding": {
            "name": "x",
            "span": [
              22,
              23,
            ],
          },
          "body": {
            "span": [
              31,
              32,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 0,
            },
          },
          "span": [
            18,
            32,
          ],
          "type": "let",
          "value": {
            "name": "a",
            "span": [
              26,
              27,
            ],
            "type": "identifier",
          },
        },
        "type": "if",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse let block with one let 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "extern": false,
      "span": [
        1,
        29,
      ],
      "value": {
        "binding": {
          "name": "x",
          "span": [
            17,
            18,
          ],
        },
        "body": {
          "span": [
            26,
            27,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 1,
          },
        },
        "span": [
          13,
          27,
        ],
        "type": "let",
        "value": {
          "span": [
            21,
            22,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 0,
          },
        },
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse let block with two let stmts 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "extern": false,
      "span": [
        1,
        42,
      ],
      "value": {
        "binding": {
          "name": "x",
          "span": [
            17,
            18,
          ],
        },
        "body": {
          "binding": {
            "name": "y",
            "span": [
              30,
              31,
            ],
          },
          "body": {
            "span": [
              39,
              40,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 2,
            },
          },
          "span": [
            26,
            40,
          ],
          "type": "let",
          "value": {
            "span": [
              34,
              35,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
        },
        "span": [
          13,
          40,
        ],
        "type": "let",
        "value": {
          "span": [
            21,
            22,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 0,
          },
        },
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse nonempty strings 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        13,
      ],
      "value": {
        "span": [
          8,
          13,
        ],
        "type": "constant",
        "value": {
          "type": "string",
          "value": "abc",
        },
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse strings with newlines 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        15,
      ],
      "value": {
        "span": [
          8,
          15,
        ],
        "type": "constant",
        "value": {
          "type": "string",
          "value": "ab
c",
        },
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse tuple sugar 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        14,
      ],
      "value": {
        "args": [
          {
            "span": [
              9,
              10,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
          {
            "span": [
              12,
              13,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 2,
            },
          },
        ],
        "caller": {
          "name": "Tuple2",
          "span": [
            8,
            14,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          14,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`parse unary ! expr 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        11,
      ],
      "value": {
        "args": [
          {
            "name": "b",
            "span": [
              10,
              11,
            ],
            "type": "identifier",
          },
        ],
        "caller": {
          "name": "!",
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          11,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > binding with identifier 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        28,
      ],
      "value": {
        "clauses": [
          [
            {
              "ident": "a",
              "span": [
                18,
                19,
              ],
              "type": "ident",
            },
            {
              "name": "res",
              "span": [
                23,
                26,
              ],
              "type": "identifier",
            },
          ],
        ],
        "expr": {
          "name": "x",
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          28,
        ],
        "type": "match",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > empty match expression 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        18,
      ],
      "value": {
        "clauses": [],
        "expr": {
          "name": "x",
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          18,
        ],
        "type": "match",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > matching constructor with no args 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        28,
      ],
      "value": {
        "clauses": [
          [
            {
              "args": [],
              "name": "X",
              "span": [
                18,
                19,
              ],
              "type": "constructor",
            },
            {
              "name": "res",
              "span": [
                23,
                26,
              ],
              "type": "identifier",
            },
          ],
        ],
        "expr": {
          "name": "x",
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          28,
        ],
        "type": "match",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > matching constructor with one arg 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        31,
      ],
      "value": {
        "clauses": [
          [
            {
              "args": [
                {
                  "ident": "a",
                  "span": [
                    20,
                    21,
                  ],
                  "type": "ident",
                },
              ],
              "name": "X",
              "span": [
                18,
                22,
              ],
              "type": "constructor",
            },
            {
              "name": "res",
              "span": [
                26,
                29,
              ],
              "type": "identifier",
            },
          ],
        ],
        "expr": {
          "name": "x",
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          31,
        ],
        "type": "match",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > matching float literals 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        30,
      ],
      "value": {
        "clauses": [
          [
            {
              "literal": {
                "type": "float",
                "value": 1.1,
              },
              "span": [
                18,
                21,
              ],
              "type": "lit",
            },
            {
              "name": "res",
              "span": [
                25,
                28,
              ],
              "type": "identifier",
            },
          ],
        ],
        "expr": {
          "name": "x",
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          30,
        ],
        "type": "match",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > matching int literals 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        29,
      ],
      "value": {
        "clauses": [
          [
            {
              "literal": {
                "type": "int",
                "value": 42,
              },
              "span": [
                18,
                20,
              ],
              "type": "lit",
            },
            {
              "name": "res",
              "span": [
                24,
                27,
              ],
              "type": "identifier",
            },
          ],
        ],
        "expr": {
          "name": "x",
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          29,
        ],
        "type": "match",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > matching str literals 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        32,
      ],
      "value": {
        "clauses": [
          [
            {
              "literal": {
                "type": "string",
                "value": "abc",
              },
              "span": [
                18,
                23,
              ],
              "type": "lit",
            },
            {
              "name": "res",
              "span": [
                27,
                30,
              ],
              "type": "identifier",
            },
          ],
        ],
        "expr": {
          "name": "x",
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          32,
        ],
        "type": "match",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > matching tuples literal (syntax sugar) 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        33,
      ],
      "value": {
        "clauses": [
          [
            {
              "args": [
                {
                  "ident": "x",
                  "span": [
                    19,
                    20,
                  ],
                  "type": "ident",
                },
                {
                  "ident": "y",
                  "span": [
                    22,
                    23,
                  ],
                  "type": "ident",
                },
              ],
              "name": "Tuple2",
              "span": [
                18,
                24,
              ],
              "type": "constructor",
            },
            {
              "name": "res",
              "span": [
                28,
                31,
              ],
              "type": "identifier",
            },
          ],
        ],
        "expr": {
          "name": "x",
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          33,
        ],
        "type": "match",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`pipe syntax sugar 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          9,
          10,
        ],
      },
      "extern": false,
      "span": [
        5,
        25,
      ],
      "value": {
        "args": [
          {
            "name": "a",
            "span": [
              13,
              14,
            ],
            "type": "identifier",
          },
          {
            "name": "x",
            "span": [
              20,
              21,
            ],
            "type": "identifier",
          },
          {
            "name": "y",
            "span": [
              23,
              24,
            ],
            "type": "identifier",
          },
        ],
        "caller": {
          "name": "f",
          "span": [
            18,
            19,
          ],
          "type": "identifier",
        },
        "span": [
          13,
          25,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`pipe syntax sugar should be chainable 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          9,
          10,
        ],
      },
      "extern": false,
      "span": [
        5,
        28,
      ],
      "value": {
        "args": [
          {
            "args": [
              {
                "name": "a",
                "span": [
                  13,
                  14,
                ],
                "type": "identifier",
              },
            ],
            "caller": {
              "name": "f",
              "span": [
                18,
                19,
              ],
              "type": "identifier",
            },
            "span": [
              13,
              21,
            ],
            "type": "application",
          },
        ],
        "caller": {
          "name": "g",
          "span": [
            25,
            26,
          ],
          "type": "identifier",
        },
        "span": [
          13,
          28,
        ],
        "type": "application",
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`type declarations > many type params 1`] = `
{
  "declarations": [],
  "typeDeclarations": [
    {
      "name": "T",
      "params": [
        {
          "name": "a",
          "span": [
            7,
            8,
          ],
        },
        {
          "name": "b",
          "span": [
            10,
            11,
          ],
        },
        {
          "name": "c",
          "span": [
            13,
            14,
          ],
        },
      ],
      "span": [
        0,
        19,
      ],
      "type": "adt",
      "variants": [],
    },
  ],
}
`;

exports[`type declarations > single type param 1`] = `
{
  "declarations": [],
  "typeDeclarations": [
    {
      "name": "T",
      "params": [
        {
          "name": "a",
          "span": [
            7,
            8,
          ],
        },
      ],
      "span": [
        0,
        13,
      ],
      "type": "adt",
      "variants": [],
    },
  ],
}
`;

exports[`type declarations > trailing comma after variants 1`] = `
{
  "declarations": [],
  "typeDeclarations": [
    {
      "name": "T",
      "params": [],
      "span": [
        0,
        16,
      ],
      "type": "adt",
      "variants": [
        {
          "args": [],
          "name": "A",
        },
        {
          "args": [],
          "name": "B",
        },
      ],
    },
  ],
}
`;

exports[`type declarations > type with a variant with complex args 1`] = `
{
  "declarations": [],
  "typeDeclarations": [
    {
      "name": "T",
      "params": [],
      "span": [
        7,
        58,
      ],
      "type": "adt",
      "variants": [
        {
          "args": [
            {
              "args": [
                {
                  "ident": "a",
                  "span": [
                    34,
                    35,
                  ],
                  "type": "var",
                },
                {
                  "args": [
                    {
                      "args": [],
                      "name": "Int",
                      "span": [
                        44,
                        47,
                      ],
                      "type": "named",
                    },
                  ],
                  "name": "Nested",
                  "span": [
                    37,
                    48,
                  ],
                  "type": "named",
                },
              ],
              "name": "Example",
              "span": [
                26,
                49,
              ],
              "type": "named",
            },
          ],
          "name": "C",
        },
      ],
    },
  ],
}
`;

exports[`type declarations > type with a variant with no args 1`] = `
{
  "declarations": [],
  "typeDeclarations": [
    {
      "name": "T",
      "params": [],
      "span": [
        0,
        12,
      ],
      "type": "adt",
      "variants": [
        {
          "args": [],
          "name": "C",
        },
      ],
    },
  ],
}
`;

exports[`type declarations > type with a variant with no args 2`] = `
{
  "declarations": [],
  "typeDeclarations": [
    {
      "name": "T",
      "params": [],
      "span": [
        0,
        17,
      ],
      "type": "adt",
      "variants": [
        {
          "args": [
            {
              "args": [],
              "name": "Arg",
              "span": [
                11,
                14,
              ],
              "type": "named",
            },
          ],
          "name": "C",
        },
      ],
    },
  ],
}
`;

exports[`type declarations > type with many variants 1`] = `
{
  "declarations": [],
  "typeDeclarations": [
    {
      "name": "T",
      "params": [],
      "span": [
        0,
        15,
      ],
      "type": "adt",
      "variants": [
        {
          "args": [],
          "name": "A",
        },
        {
          "args": [],
          "name": "B",
        },
      ],
    },
  ],
}
`;

exports[`type declarations > type with no variants 1`] = `
{
  "declarations": [],
  "typeDeclarations": [
    {
      "name": "Never",
      "params": [],
      "span": [
        0,
        14,
      ],
      "type": "adt",
      "variants": [],
    },
  ],
}
`;

exports[`type hints > parses Fn type with args 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        25,
      ],
      "typeHint": {
        "args": [
          {
            "args": [],
            "name": "X",
            "span": [
              11,
              12,
            ],
            "type": "named",
          },
          {
            "args": [],
            "name": "Y",
            "span": [
              14,
              15,
            ],
            "type": "named",
          },
        ],
        "return": {
          "args": [],
          "name": "Z",
          "span": [
            20,
            21,
          ],
          "type": "named",
        },
        "span": [
          8,
          21,
        ],
        "type": "fn",
      },
      "value": {
        "span": [
          24,
          25,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`type hints > parses Fn type with no args 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        23,
      ],
      "typeHint": {
        "args": [],
        "return": {
          "args": [],
          "name": "Int",
          "span": [
            16,
            19,
          ],
          "type": "named",
        },
        "span": [
          8,
          19,
        ],
        "type": "fn",
      },
      "value": {
        "span": [
          22,
          23,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`type hints > parses a concrete type with no args as a type hint 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        15,
      ],
      "typeHint": {
        "args": [],
        "name": "Int",
        "span": [
          8,
          11,
        ],
        "type": "named",
      },
      "value": {
        "span": [
          14,
          15,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`type hints > parses concrete type with 1 arg 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        22,
      ],
      "typeHint": {
        "args": [
          {
            "args": [],
            "name": "Int",
            "span": [
              14,
              17,
            ],
            "type": "named",
          },
        ],
        "name": "Maybe",
        "span": [
          8,
          18,
        ],
        "type": "named",
      },
      "value": {
        "span": [
          21,
          22,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`type hints > parses concrete type with 2 args 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        29,
      ],
      "typeHint": {
        "args": [
          {
            "args": [],
            "name": "Int",
            "span": [
              15,
              18,
            ],
            "type": "named",
          },
          {
            "args": [],
            "name": "Bool",
            "span": [
              20,
              24,
            ],
            "type": "named",
          },
        ],
        "name": "Result",
        "span": [
          8,
          25,
        ],
        "type": "named",
      },
      "value": {
        "span": [
          28,
          29,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`type hints > parses type vars hints 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        13,
      ],
      "typeHint": {
        "ident": "a",
        "span": [
          8,
          9,
        ],
        "type": "var",
      },
      "value": {
        "span": [
          12,
          13,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`type hints > parses underscore type 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "span": [
        0,
        13,
      ],
      "typeHint": {
        "span": [
          8,
          9,
        ],
        "type": "any",
      },
      "value": {
        "span": [
          12,
          13,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
  "typeDeclarations": [],
}
`;
