// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`parse * expr 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "span": [
        0,
        13,
      ],
      "type": "let",
      "value": {
        "args": [
          {
            "span": [
              8,
              9,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
          {
            "span": [
              12,
              13,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 2,
            },
          },
        ],
        "caller": {
          "name": "*",
          "span": [
            10,
            11,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          13,
        ],
        "type": "application",
      },
    },
  ],
}
`;

exports[`parse + and * prec 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "span": [
        0,
        17,
      ],
      "type": "let",
      "value": {
        "args": [
          {
            "span": [
              8,
              9,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
          {
            "args": [
              {
                "span": [
                  12,
                  13,
                ],
                "type": "constant",
                "value": {
                  "type": "int",
                  "value": 2,
                },
              },
              {
                "span": [
                  16,
                  17,
                ],
                "type": "constant",
                "value": {
                  "type": "int",
                  "value": 3,
                },
              },
            ],
            "caller": {
              "name": "*",
              "span": [
                14,
                15,
              ],
              "type": "identifier",
            },
            "span": [
              12,
              17,
            ],
            "type": "application",
          },
        ],
        "caller": {
          "name": "-",
          "span": [
            10,
            11,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          17,
        ],
        "type": "application",
      },
    },
  ],
}
`;

exports[`parse + and * prec with parens 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "span": [
        0,
        19,
      ],
      "type": "let",
      "value": {
        "args": [
          {
            "args": [
              {
                "span": [
                  9,
                  10,
                ],
                "type": "constant",
                "value": {
                  "type": "int",
                  "value": 1,
                },
              },
              {
                "span": [
                  13,
                  14,
                ],
                "type": "constant",
                "value": {
                  "type": "int",
                  "value": 2,
                },
              },
            ],
            "caller": {
              "name": "-",
              "span": [
                11,
                12,
              ],
              "type": "identifier",
            },
            "span": [
              9,
              14,
            ],
            "type": "application",
          },
          {
            "span": [
              18,
              19,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 3,
            },
          },
        ],
        "caller": {
          "name": "*",
          "span": [
            16,
            17,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          19,
        ],
        "type": "application",
      },
    },
  ],
}
`;

exports[`parse + expr 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "span": [
        0,
        13,
      ],
      "type": "let",
      "value": {
        "args": [
          {
            "span": [
              8,
              9,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
          {
            "span": [
              12,
              13,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 2,
            },
          },
        ],
        "caller": {
          "name": "+",
          "span": [
            10,
            11,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          13,
        ],
        "type": "application",
      },
    },
  ],
}
`;

exports[`parse - expr 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "span": [
        0,
        13,
      ],
      "type": "let",
      "value": {
        "args": [
          {
            "span": [
              8,
              9,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
          {
            "span": [
              12,
              13,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 2,
            },
          },
        ],
        "caller": {
          "name": "-",
          "span": [
            10,
            11,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          13,
        ],
        "type": "application",
      },
    },
  ],
}
`;

exports[`parse appl with 1 arg 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "span": [
        0,
        12,
      ],
      "type": "let",
      "value": {
        "args": [
          {
            "name": "x",
            "span": [
              10,
              11,
            ],
            "type": "identifier",
          },
        ],
        "caller": {
          "name": "f",
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          12,
        ],
        "type": "application",
      },
    },
  ],
}
`;

exports[`parse appl with 3 args 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "span": [
        0,
        18,
      ],
      "type": "let",
      "value": {
        "args": [
          {
            "name": "x",
            "span": [
              10,
              11,
            ],
            "type": "identifier",
          },
          {
            "name": "y",
            "span": [
              13,
              14,
            ],
            "type": "identifier",
          },
          {
            "name": "z",
            "span": [
              16,
              17,
            ],
            "type": "identifier",
          },
        ],
        "caller": {
          "name": "f",
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          18,
        ],
        "type": "application",
      },
    },
  ],
}
`;

exports[`parse appl with nested expr 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "span": [
        0,
        16,
      ],
      "type": "let",
      "value": {
        "args": [
          {
            "args": [
              {
                "span": [
                  10,
                  11,
                ],
                "type": "constant",
                "value": {
                  "type": "int",
                  "value": 1,
                },
              },
              {
                "span": [
                  14,
                  15,
                ],
                "type": "constant",
                "value": {
                  "type": "int",
                  "value": 2,
                },
              },
            ],
            "caller": {
              "name": "+",
              "span": [
                12,
                13,
              ],
              "type": "identifier",
            },
            "span": [
              10,
              15,
            ],
            "type": "application",
          },
        ],
        "caller": {
          "name": "f",
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          16,
        ],
        "type": "application",
      },
    },
  ],
}
`;

exports[`parse appl with nested parens 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "span": [
        0,
        14,
      ],
      "type": "let",
      "value": {
        "args": [
          {
            "span": [
              11,
              12,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
        ],
        "caller": {
          "name": "f",
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          14,
        ],
        "type": "application",
      },
    },
  ],
}
`;

exports[`parse appl with no args 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "span": [
        0,
        11,
      ],
      "type": "let",
      "value": {
        "args": [],
        "caller": {
          "name": "f",
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          11,
        ],
        "type": "application",
      },
    },
  ],
}
`;

exports[`parse appl with trailing comma 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "span": [
        0,
        28,
      ],
      "type": "let",
      "value": {
        "args": [
          {
            "name": "x",
            "span": [
              15,
              16,
            ],
            "type": "identifier",
          },
          {
            "name": "y",
            "span": [
              22,
              23,
            ],
            "type": "identifier",
          },
        ],
        "caller": {
          "name": "f",
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          28,
        ],
        "type": "application",
      },
    },
  ],
}
`;

exports[`parse block with no let 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "span": [
        1,
        14,
      ],
      "type": "let",
      "value": {
        "span": [
          11,
          12,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 1,
        },
      },
    },
  ],
}
`;

exports[`parse float 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "span": [
        0,
        12,
      ],
      "type": "let",
      "value": {
        "span": [
          8,
          12,
        ],
        "type": "constant",
        "value": {
          "type": "float",
          "value": 1.23,
        },
      },
    },
  ],
}
`;

exports[`parse fn with 1 arg 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "span": [
        1,
        19,
      ],
      "type": "let",
      "value": {
        "body": {
          "span": [
            16,
            17,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 0,
          },
        },
        "params": [
          {
            "name": "x",
            "span": [
              12,
              13,
            ],
          },
        ],
        "span": [
          9,
          19,
        ],
        "type": "fn",
      },
    },
  ],
}
`;

exports[`parse fn with 2 args 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "span": [
        1,
        22,
      ],
      "type": "let",
      "value": {
        "body": {
          "span": [
            19,
            20,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 0,
          },
        },
        "params": [
          {
            "name": "x",
            "span": [
              12,
              13,
            ],
          },
          {
            "name": "y",
            "span": [
              15,
              16,
            ],
          },
        ],
        "span": [
          9,
          22,
        ],
        "type": "fn",
      },
    },
  ],
}
`;

exports[`parse fn with let 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "span": [
        1,
        32,
      ],
      "type": "let",
      "value": {
        "body": {
          "binding": {
            "name": "x",
            "span": [
              20,
              21,
            ],
          },
          "body": {
            "span": [
              29,
              30,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
          "span": [
            16,
            30,
          ],
          "type": "let",
          "value": {
            "span": [
              24,
              25,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 0,
            },
          },
        },
        "params": [],
        "span": [
          9,
          32,
        ],
        "type": "fn",
      },
    },
  ],
}
`;

exports[`parse fn with no args 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "span": [
        1,
        17,
      ],
      "type": "let",
      "value": {
        "body": {
          "span": [
            14,
            15,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 0,
          },
        },
        "params": [],
        "span": [
          9,
          17,
        ],
        "type": "fn",
      },
    },
  ],
}
`;

exports[`parse ident 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "span": [
        0,
        9,
      ],
      "type": "let",
      "value": {
        "name": "x",
        "span": [
          8,
          9,
        ],
        "type": "identifier",
      },
    },
  ],
}
`;

exports[`parse if expr 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "span": [
        1,
        30,
      ],
      "type": "let",
      "value": {
        "condition": {
          "name": "b",
          "span": [
            12,
            13,
          ],
          "type": "identifier",
        },
        "else": {
          "span": [
            27,
            28,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 1,
          },
        },
        "span": [
          9,
          30,
        ],
        "then": {
          "span": [
            16,
            17,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 0,
          },
        },
        "type": "if",
      },
    },
  ],
}
`;

exports[`parse if expr with a let expr 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "span": [
        1,
        47,
      ],
      "type": "let",
      "value": {
        "condition": {
          "name": "b",
          "span": [
            12,
            13,
          ],
          "type": "identifier",
        },
        "else": {
          "span": [
            44,
            45,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 1,
          },
        },
        "span": [
          9,
          47,
        ],
        "then": {
          "binding": {
            "name": "x",
            "span": [
              22,
              23,
            ],
          },
          "body": {
            "span": [
              31,
              32,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 0,
            },
          },
          "span": [
            18,
            32,
          ],
          "type": "let",
          "value": {
            "name": "a",
            "span": [
              26,
              27,
            ],
            "type": "identifier",
          },
        },
        "type": "if",
      },
    },
  ],
}
`;

exports[`parse let block with one let 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "span": [
        1,
        29,
      ],
      "type": "let",
      "value": {
        "binding": {
          "name": "x",
          "span": [
            17,
            18,
          ],
        },
        "body": {
          "span": [
            26,
            27,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 1,
          },
        },
        "span": [
          13,
          27,
        ],
        "type": "let",
        "value": {
          "span": [
            21,
            22,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 0,
          },
        },
      },
    },
  ],
}
`;

exports[`parse let block with two let stmts 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "span": [
        1,
        42,
      ],
      "type": "let",
      "value": {
        "binding": {
          "name": "x",
          "span": [
            17,
            18,
          ],
        },
        "body": {
          "binding": {
            "name": "y",
            "span": [
              30,
              31,
            ],
          },
          "body": {
            "span": [
              39,
              40,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 2,
            },
          },
          "span": [
            26,
            40,
          ],
          "type": "let",
          "value": {
            "span": [
              34,
              35,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
        },
        "span": [
          13,
          40,
        ],
        "type": "let",
        "value": {
          "span": [
            21,
            22,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 0,
          },
        },
      },
    },
  ],
}
`;

exports[`parses Fn type with args 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "span": [
        0,
        25,
      ],
      "type": "let",
      "typeHint": {
        "args": [
          {
            "args": [],
            "name": "X",
            "type": "named",
          },
          {
            "args": [],
            "name": "Y",
            "type": "named",
          },
        ],
        "return": {
          "args": [],
          "name": "Z",
          "type": "named",
        },
        "span": [
          8,
          21,
        ],
        "type": "fn",
      },
      "value": {
        "span": [
          24,
          25,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
}
`;

exports[`parses Fn type with no args 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "span": [
        0,
        23,
      ],
      "type": "let",
      "typeHint": {
        "args": [],
        "return": {
          "args": [],
          "name": "Int",
          "type": "named",
        },
        "span": [
          8,
          19,
        ],
        "type": "fn",
      },
      "value": {
        "span": [
          22,
          23,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
}
`;

exports[`parses a concrete type with no args as a type hint 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "span": [
        0,
        15,
      ],
      "type": "let",
      "typeHint": {
        "args": [],
        "name": "Int",
        "span": [
          8,
          11,
        ],
        "type": "named",
      },
      "value": {
        "span": [
          14,
          15,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
}
`;

exports[`parses concrete type with 1 arg 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "span": [
        0,
        22,
      ],
      "type": "let",
      "typeHint": {
        "args": [
          {
            "args": [],
            "name": "Int",
            "type": "named",
          },
        ],
        "name": "Maybe",
        "span": [
          8,
          18,
        ],
        "type": "named",
      },
      "value": {
        "span": [
          21,
          22,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
}
`;

exports[`parses concrete type with 2 args 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "span": [
        0,
        29,
      ],
      "type": "let",
      "typeHint": {
        "args": [
          {
            "args": [],
            "name": "Int",
            "type": "named",
          },
          {
            "args": [],
            "name": "Bool",
            "type": "named",
          },
        ],
        "name": "Result",
        "span": [
          8,
          25,
        ],
        "type": "named",
      },
      "value": {
        "span": [
          28,
          29,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
}
`;

exports[`parses underscore type 1`] = `
{
  "statements": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "span": [
        0,
        13,
      ],
      "type": "let",
      "typeHint": {
        "span": [
          8,
          9,
        ],
        "type": "any",
      },
      "value": {
        "span": [
          12,
          13,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
}
`;
