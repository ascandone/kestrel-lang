// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`+ is left-associative 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        17,
      ],
      "value": {
        "left": {
          "left": {
            "span": [
              8,
              9,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
          "operator": "+",
          "right": {
            "span": [
              12,
              13,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 2,
            },
          },
          "span": [
            8,
            13,
          ],
          "type": "infix",
        },
        "operator": "+",
        "right": {
          "span": [
            16,
            17,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 3,
          },
        },
        "span": [
          8,
          17,
        ],
        "type": "infix",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`Comments > doc comments 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          48,
          49,
        ],
      },
      "docComment": " first line
 second line
",
      "extern": false,
      "pub": false,
      "span": [
        5,
        53,
      ],
      "value": {
        "span": [
          52,
          53,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`Comments > doc comments on extern types 1`] = `
{
  "declarations": [],
  "imports": [],
  "typeDeclarations": [
    {
      "docComment": " first line
 second line
",
      "name": "X",
      "params": [],
      "pub": false,
      "span": [
        5,
        57,
      ],
      "type": "extern",
    },
  ],
}
`;

exports[`Comments > doc comments on externs 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          55,
          56,
        ],
      },
      "docComment": " first line
 second line
",
      "extern": true,
      "pub": false,
      "span": [
        5,
        59,
      ],
      "typeHint": {
        "args": [],
        "name": "X",
        "span": [
          58,
          59,
        ],
        "type": "named",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`Comments > doc comments on types 1`] = `
{
  "declarations": [],
  "imports": [],
  "typeDeclarations": [
    {
      "docComment": " first line
 second line
",
      "name": "X",
      "params": [],
      "pub": false,
      "span": [
        5,
        53,
      ],
      "type": "adt",
      "variants": [],
    },
  ],
}
`;

exports[`Comments > doc comments with many declrs 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          9,
          10,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        5,
        14,
      ],
      "value": {
        "span": [
          13,
          14,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
    {
      "binding": {
        "name": "y",
        "span": [
          44,
          45,
        ],
      },
      "docComment": " comment
",
      "extern": false,
      "pub": true,
      "span": [
        20,
        49,
      ],
      "value": {
        "span": [
          48,
          49,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 1,
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`Comments > moduledoc comments 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          60,
          61,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        56,
        65,
      ],
      "value": {
        "span": [
          64,
          65,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
  "imports": [],
  "moduleDoc": " Module level comment
 Second line
",
  "typeDeclarations": [],
}
`;

exports[`extern bindings > let decls 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          18,
          19,
        ],
      },
      "extern": true,
      "pub": false,
      "span": [
        7,
        24,
      ],
      "typeHint": {
        "args": [],
        "name": "Int",
        "span": [
          21,
          24,
        ],
        "type": "named",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`extern bindings > let decls defining infix operators 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": ">=>",
        "span": [
          18,
          23,
        ],
      },
      "extern": true,
      "pub": false,
      "span": [
        7,
        36,
      ],
      "typeHint": {
        "args": [],
        "name": "ExampleType",
        "span": [
          25,
          36,
        ],
        "type": "named",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`extern bindings > types 1`] = `
{
  "declarations": [],
  "imports": [],
  "typeDeclarations": [
    {
      "name": "T",
      "params": [],
      "pub": false,
      "span": [
        7,
        20,
      ],
      "type": "extern",
    },
  ],
}
`;

exports[`ignoring comments 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          34,
          35,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        30,
        40,
      ],
      "value": {
        "span": [
          38,
          40,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 42,
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`imports > identifiers can be qualified 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        16,
      ],
      "value": {
        "name": "name",
        "namespace": "A/B",
        "span": [
          8,
          16,
        ],
        "type": "identifier",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`imports > import nested modules 1`] = `
{
  "declarations": [],
  "imports": [
    {
      "exposing": [],
      "ns": "A/B/C",
      "span": [
        0,
        12,
      ],
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`imports > import single module 1`] = `
{
  "declarations": [],
  "imports": [
    {
      "exposing": [],
      "ns": "A",
      "span": [
        0,
        8,
      ],
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`imports > parse pub modifier 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          8,
          9,
        ],
      },
      "extern": false,
      "pub": true,
      "span": [
        0,
        16,
      ],
      "value": {
        "span": [
          12,
          16,
        ],
        "type": "constant",
        "value": {
          "type": "float",
          "value": 1.23,
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`imports > parse pub modifier on extern types 1`] = `
{
  "declarations": [],
  "imports": [],
  "typeDeclarations": [
    {
      "name": "T",
      "params": [],
      "pub": true,
      "span": [
        0,
        17,
      ],
      "type": "extern",
    },
  ],
}
`;

exports[`imports > parse pub modifier on extern values 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          15,
          16,
        ],
      },
      "extern": true,
      "pub": true,
      "span": [
        0,
        21,
      ],
      "typeHint": {
        "args": [],
        "name": "Int",
        "span": [
          18,
          21,
        ],
        "type": "named",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`imports > parse pub modifier on types 1`] = `
{
  "declarations": [],
  "imports": [],
  "typeDeclarations": [
    {
      "name": "T",
      "params": [],
      "pub": true,
      "span": [
        0,
        14,
      ],
      "type": "adt",
      "variants": [],
    },
  ],
}
`;

exports[`imports > parse pub(..) modifier on types 1`] = `
{
  "declarations": [],
  "imports": [],
  "typeDeclarations": [
    {
      "name": "T",
      "params": [],
      "pub": "..",
      "span": [
        0,
        18,
      ],
      "type": "adt",
      "variants": [],
    },
  ],
}
`;

exports[`imports > type constructors can be qualified 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        16,
      ],
      "value": {
        "name": "Name",
        "namespace": "A/B",
        "span": [
          8,
          16,
        ],
        "type": "identifier",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`imports > type defs can be qualified 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          11,
          12,
        ],
      },
      "extern": true,
      "pub": false,
      "span": [
        0,
        24,
      ],
      "typeHint": {
        "args": [],
        "name": "MyType",
        "namespace": "A/B",
        "span": [
          14,
          24,
        ],
        "type": "named",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`imports > unqualified import of a value 1`] = `
{
  "declarations": [],
  "imports": [
    {
      "exposing": [
        {
          "name": "imported",
          "span": [
            14,
            22,
          ],
          "type": "value",
        },
      ],
      "ns": "A/B/C",
      "span": [
        0,
        23,
      ],
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`imports > unqualified import of an infix value 1`] = `
{
  "declarations": [],
  "imports": [
    {
      "exposing": [
        {
          "name": "+",
          "span": [
            10,
            13,
          ],
          "type": "value",
        },
      ],
      "ns": "A",
      "span": [
        0,
        14,
      ],
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`imports > unqualified import of types (non-opaque) 1`] = `
{
  "declarations": [],
  "imports": [
    {
      "exposing": [
        {
          "exposeImpl": true,
          "name": "T1",
          "span": [
            14,
            20,
          ],
          "type": "type",
        },
      ],
      "ns": "A/B/C",
      "span": [
        0,
        21,
      ],
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`imports > unqualified import of types 1`] = `
{
  "declarations": [],
  "imports": [
    {
      "exposing": [
        {
          "exposeImpl": false,
          "name": "T1",
          "span": [
            14,
            16,
          ],
          "type": "type",
        },
        {
          "exposeImpl": false,
          "name": "T2",
          "span": [
            18,
            20,
          ],
          "type": "type",
        },
      ],
      "ns": "A/B/C",
      "span": [
        0,
        21,
      ],
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`imports > unqualified import of values 1`] = `
{
  "declarations": [],
  "imports": [
    {
      "exposing": [
        {
          "name": "x",
          "span": [
            14,
            15,
          ],
          "type": "value",
        },
        {
          "name": "y",
          "span": [
            17,
            18,
          ],
          "type": "value",
        },
        {
          "name": "z",
          "span": [
            20,
            21,
          ],
          "type": "value",
        },
      ],
      "ns": "A/B/C",
      "span": [
        0,
        22,
      ],
    },
  ],
  "typeDeclarations": [],
}
`;

exports[`it should be possible to mix pipe with infix 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          9,
          10,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        5,
        32,
      ],
      "value": {
        "left": {
          "left": {
            "left": {
              "span": [
                13,
                14,
              ],
              "type": "constant",
              "value": {
                "type": "int",
                "value": 1,
              },
            },
            "operator": "+",
            "right": {
              "span": [
                17,
                18,
              ],
              "type": "constant",
              "value": {
                "type": "int",
                "value": 2,
              },
            },
            "span": [
              13,
              18,
            ],
            "type": "infix",
          },
          "right": {
            "args": [],
            "caller": {
              "name": "f",
              "namespace": undefined,
              "span": [
                22,
                23,
              ],
              "type": "identifier",
            },
            "span": [
              22,
              25,
            ],
            "type": "application",
          },
          "span": [
            13,
            25,
          ],
          "type": "pipe",
        },
        "right": {
          "args": [],
          "caller": {
            "name": "g",
            "namespace": undefined,
            "span": [
              29,
              30,
            ],
            "type": "identifier",
          },
          "span": [
            29,
            32,
          ],
          "type": "application",
        },
        "span": [
          13,
          32,
        ],
        "type": "pipe",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`monadic let syntax sugar 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          9,
          10,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        5,
        58,
      ],
      "value": {
        "body": {
          "name": "body",
          "namespace": undefined,
          "span": [
            48,
            52,
          ],
          "type": "identifier",
        },
        "mapper": {
          "name": "bind_f",
          "namespace": undefined,
          "span": [
            25,
            31,
          ],
          "type": "identifier",
        },
        "pattern": {
          "name": "x",
          "span": [
            32,
            33,
          ],
          "type": "identifier",
        },
        "span": [
          21,
          52,
        ],
        "type": "let#",
        "value": {
          "name": "expr",
          "namespace": undefined,
          "span": [
            36,
            40,
          ],
          "type": "identifier",
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`monadic let syntax sugar should handle qualified names 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          9,
          10,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        5,
        61,
      ],
      "value": {
        "body": {
          "name": "body",
          "namespace": undefined,
          "span": [
            51,
            55,
          ],
          "type": "identifier",
        },
        "mapper": {
          "name": "bind",
          "namespace": "Task",
          "span": [
            25,
            34,
          ],
          "type": "identifier",
        },
        "pattern": {
          "name": "x",
          "span": [
            35,
            36,
          ],
          "type": "identifier",
        },
        "span": [
          21,
          55,
        ],
        "type": "let#",
        "value": {
          "name": "expr",
          "namespace": undefined,
          "span": [
            39,
            43,
          ],
          "type": "identifier",
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse * expr 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        13,
      ],
      "value": {
        "left": {
          "span": [
            8,
            9,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 1,
          },
        },
        "operator": "*",
        "right": {
          "span": [
            12,
            13,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 2,
          },
        },
        "span": [
          8,
          13,
        ],
        "type": "infix",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse + and * prec 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        17,
      ],
      "value": {
        "left": {
          "span": [
            8,
            9,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 1,
          },
        },
        "operator": "-",
        "right": {
          "left": {
            "span": [
              12,
              13,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 2,
            },
          },
          "operator": "*",
          "right": {
            "span": [
              16,
              17,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 3,
            },
          },
          "span": [
            12,
            17,
          ],
          "type": "infix",
        },
        "span": [
          8,
          17,
        ],
        "type": "infix",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse + and * prec with parens 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        19,
      ],
      "value": {
        "left": {
          "left": {
            "span": [
              9,
              10,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
          "operator": "-",
          "right": {
            "span": [
              13,
              14,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 2,
            },
          },
          "span": [
            9,
            14,
          ],
          "type": "infix",
        },
        "operator": "*",
        "right": {
          "span": [
            18,
            19,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 3,
          },
        },
        "span": [
          8,
          19,
        ],
        "type": "infix",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse + expr 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        13,
      ],
      "value": {
        "left": {
          "span": [
            8,
            9,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 1,
          },
        },
        "operator": "+",
        "right": {
          "span": [
            12,
            13,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 2,
          },
        },
        "span": [
          8,
          13,
        ],
        "type": "infix",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse +. expr 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        14,
      ],
      "value": {
        "left": {
          "span": [
            8,
            9,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 1,
          },
        },
        "operator": "+.",
        "right": {
          "span": [
            13,
            14,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 2,
          },
        },
        "span": [
          8,
          14,
        ],
        "type": "infix",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse - expr 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        13,
      ],
      "value": {
        "left": {
          "span": [
            8,
            9,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 1,
          },
        },
        "operator": "-",
        "right": {
          "span": [
            12,
            13,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 2,
          },
        },
        "span": [
          8,
          13,
        ],
        "type": "infix",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse appl with 1 arg 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        12,
      ],
      "value": {
        "args": [
          {
            "name": "x",
            "namespace": undefined,
            "span": [
              10,
              11,
            ],
            "type": "identifier",
          },
        ],
        "caller": {
          "name": "f",
          "namespace": undefined,
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          12,
        ],
        "type": "application",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse appl with 3 args 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        18,
      ],
      "value": {
        "args": [
          {
            "name": "x",
            "namespace": undefined,
            "span": [
              10,
              11,
            ],
            "type": "identifier",
          },
          {
            "name": "y",
            "namespace": undefined,
            "span": [
              13,
              14,
            ],
            "type": "identifier",
          },
          {
            "name": "z",
            "namespace": undefined,
            "span": [
              16,
              17,
            ],
            "type": "identifier",
          },
        ],
        "caller": {
          "name": "f",
          "namespace": undefined,
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          18,
        ],
        "type": "application",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse appl with nested expr 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        16,
      ],
      "value": {
        "args": [
          {
            "left": {
              "span": [
                10,
                11,
              ],
              "type": "constant",
              "value": {
                "type": "int",
                "value": 1,
              },
            },
            "operator": "+",
            "right": {
              "span": [
                14,
                15,
              ],
              "type": "constant",
              "value": {
                "type": "int",
                "value": 2,
              },
            },
            "span": [
              10,
              15,
            ],
            "type": "infix",
          },
        ],
        "caller": {
          "name": "f",
          "namespace": undefined,
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          16,
        ],
        "type": "application",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse appl with nested parens 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        14,
      ],
      "value": {
        "args": [
          {
            "span": [
              11,
              12,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
        ],
        "caller": {
          "name": "f",
          "namespace": undefined,
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          14,
        ],
        "type": "application",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse appl with no args 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        11,
      ],
      "value": {
        "args": [],
        "caller": {
          "name": "f",
          "namespace": undefined,
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          11,
        ],
        "type": "application",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse appl with trailing comma 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        28,
      ],
      "value": {
        "args": [
          {
            "name": "x",
            "namespace": undefined,
            "span": [
              15,
              16,
            ],
            "type": "identifier",
          },
          {
            "name": "y",
            "namespace": undefined,
            "span": [
              22,
              23,
            ],
            "type": "identifier",
          },
        ],
        "caller": {
          "name": "f",
          "namespace": undefined,
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          28,
        ],
        "type": "application",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse block with no let 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        1,
        14,
      ],
      "value": {
        "span": [
          11,
          12,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 1,
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse chars 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        11,
      ],
      "value": {
        "span": [
          8,
          11,
        ],
        "type": "constant",
        "value": {
          "type": "char",
          "value": "a",
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse cons operator is right-associative 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        21,
      ],
      "value": {
        "args": [
          {
            "name": "a",
            "namespace": undefined,
            "span": [
              8,
              9,
            ],
            "type": "identifier",
          },
          {
            "args": [
              {
                "name": "b",
                "namespace": undefined,
                "span": [
                  13,
                  14,
                ],
                "type": "identifier",
              },
              {
                "name": "Nil",
                "namespace": undefined,
                "span": [
                  18,
                  21,
                ],
                "type": "identifier",
              },
            ],
            "caller": {
              "name": "Cons",
              "namespace": "List",
              "span": [
                15,
                17,
              ],
              "type": "identifier",
            },
            "span": [
              13,
              21,
            ],
            "type": "application",
          },
        ],
        "caller": {
          "name": "Cons",
          "namespace": "List",
          "span": [
            10,
            12,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          21,
        ],
        "type": "application",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse conslist sugar 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        16,
      ],
      "value": {
        "args": [
          {
            "name": "hd",
            "namespace": undefined,
            "span": [
              8,
              10,
            ],
            "type": "identifier",
          },
          {
            "name": "tl",
            "namespace": undefined,
            "span": [
              14,
              16,
            ],
            "type": "identifier",
          },
        ],
        "caller": {
          "name": "Cons",
          "namespace": "List",
          "span": [
            11,
            13,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          16,
        ],
        "type": "application",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse empty list sugar 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        10,
      ],
      "value": {
        "name": "Nil",
        "namespace": "List",
        "span": [
          0,
          -1,
        ],
        "type": "identifier",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse empty strings 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        10,
      ],
      "value": {
        "span": [
          8,
          10,
        ],
        "type": "constant",
        "value": {
          "type": "string",
          "value": "",
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse float 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        12,
      ],
      "value": {
        "span": [
          8,
          12,
        ],
        "type": "constant",
        "value": {
          "type": "float",
          "value": 1.23,
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse fn with 1 arg 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        1,
        19,
      ],
      "value": {
        "body": {
          "span": [
            16,
            17,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 0,
          },
        },
        "params": [
          {
            "name": "x",
            "span": [
              12,
              13,
            ],
            "type": "identifier",
          },
        ],
        "span": [
          9,
          19,
        ],
        "type": "fn",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse fn with 2 args 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        1,
        22,
      ],
      "value": {
        "body": {
          "span": [
            19,
            20,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 0,
          },
        },
        "params": [
          {
            "name": "x",
            "span": [
              12,
              13,
            ],
            "type": "identifier",
          },
          {
            "name": "y",
            "span": [
              15,
              16,
            ],
            "type": "identifier",
          },
        ],
        "span": [
          9,
          22,
        ],
        "type": "fn",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse fn with let 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        1,
        32,
      ],
      "value": {
        "body": {
          "body": {
            "span": [
              29,
              30,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
          "pattern": {
            "name": "x",
            "span": [
              20,
              21,
            ],
            "type": "identifier",
          },
          "span": [
            16,
            30,
          ],
          "type": "let",
          "value": {
            "span": [
              24,
              25,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 0,
            },
          },
        },
        "params": [],
        "span": [
          9,
          32,
        ],
        "type": "fn",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse fn with no args 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        1,
        17,
      ],
      "value": {
        "body": {
          "span": [
            14,
            15,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 0,
          },
        },
        "params": [],
        "span": [
          9,
          17,
        ],
        "type": "fn",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse ident 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        9,
      ],
      "value": {
        "name": "x",
        "namespace": undefined,
        "span": [
          8,
          9,
        ],
        "type": "identifier",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse if expr 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        1,
        30,
      ],
      "value": {
        "condition": {
          "name": "b",
          "namespace": undefined,
          "span": [
            12,
            13,
          ],
          "type": "identifier",
        },
        "else": {
          "span": [
            27,
            28,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 1,
          },
        },
        "span": [
          9,
          30,
        ],
        "then": {
          "span": [
            16,
            17,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 0,
          },
        },
        "type": "if",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse if expr with a let expr 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        1,
        47,
      ],
      "value": {
        "condition": {
          "name": "b",
          "namespace": undefined,
          "span": [
            12,
            13,
          ],
          "type": "identifier",
        },
        "else": {
          "span": [
            44,
            45,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 1,
          },
        },
        "span": [
          9,
          47,
        ],
        "then": {
          "body": {
            "span": [
              31,
              32,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 0,
            },
          },
          "pattern": {
            "name": "x",
            "span": [
              22,
              23,
            ],
            "type": "identifier",
          },
          "span": [
            18,
            32,
          ],
          "type": "let",
          "value": {
            "name": "a",
            "namespace": undefined,
            "span": [
              26,
              27,
            ],
            "type": "identifier",
          },
        },
        "type": "if",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse let block with one let 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        1,
        29,
      ],
      "value": {
        "body": {
          "span": [
            26,
            27,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 1,
          },
        },
        "pattern": {
          "name": "x",
          "span": [
            17,
            18,
          ],
          "type": "identifier",
        },
        "span": [
          13,
          27,
        ],
        "type": "let",
        "value": {
          "span": [
            21,
            22,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 0,
          },
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse let block with two let stmts 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          5,
          6,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        1,
        42,
      ],
      "value": {
        "body": {
          "body": {
            "span": [
              39,
              40,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 2,
            },
          },
          "pattern": {
            "name": "y",
            "span": [
              30,
              31,
            ],
            "type": "identifier",
          },
          "span": [
            26,
            40,
          ],
          "type": "let",
          "value": {
            "span": [
              34,
              35,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
        },
        "pattern": {
          "name": "x",
          "span": [
            17,
            18,
          ],
          "type": "identifier",
        },
        "span": [
          13,
          40,
        ],
        "type": "let",
        "value": {
          "span": [
            21,
            22,
          ],
          "type": "constant",
          "value": {
            "type": "int",
            "value": 0,
          },
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse list sugar with many values 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        17,
      ],
      "value": {
        "args": [
          {
            "span": [
              9,
              10,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 0,
            },
          },
          {
            "args": [
              {
                "span": [
                  12,
                  13,
                ],
                "type": "constant",
                "value": {
                  "type": "int",
                  "value": 1,
                },
              },
              {
                "args": [
                  {
                    "span": [
                      15,
                      16,
                    ],
                    "type": "constant",
                    "value": {
                      "type": "int",
                      "value": 2,
                    },
                  },
                  {
                    "name": "Nil",
                    "namespace": "List",
                    "span": [
                      0,
                      -1,
                    ],
                    "type": "identifier",
                  },
                ],
                "caller": {
                  "name": "Cons",
                  "namespace": "List",
                  "span": [
                    0,
                    -1,
                  ],
                  "type": "identifier",
                },
                "span": [
                  8,
                  17,
                ],
                "type": "application",
              },
            ],
            "caller": {
              "name": "Cons",
              "namespace": "List",
              "span": [
                0,
                -1,
              ],
              "type": "identifier",
            },
            "span": [
              8,
              17,
            ],
            "type": "application",
          },
        ],
        "caller": {
          "name": "Cons",
          "namespace": "List",
          "span": [
            0,
            -1,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          17,
        ],
        "type": "application",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse nonempty strings 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        13,
      ],
      "value": {
        "span": [
          8,
          13,
        ],
        "type": "constant",
        "value": {
          "type": "string",
          "value": "abc",
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse singleton list sugar 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        12,
      ],
      "value": {
        "args": [
          {
            "span": [
              9,
              11,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 42,
            },
          },
          {
            "name": "Nil",
            "namespace": "List",
            "span": [
              0,
              -1,
            ],
            "type": "identifier",
          },
        ],
        "caller": {
          "name": "Cons",
          "namespace": "List",
          "span": [
            0,
            -1,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          12,
        ],
        "type": "application",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse strings with escaped quotes 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        15,
      ],
      "value": {
        "span": [
          8,
          15,
        ],
        "type": "constant",
        "value": {
          "type": "string",
          "value": "ab\\"c",
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse strings with newlines 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        15,
      ],
      "value": {
        "span": [
          8,
          15,
        ],
        "type": "constant",
        "value": {
          "type": "string",
          "value": "ab\\nc",
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse tuple sugar 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        14,
      ],
      "value": {
        "args": [
          {
            "span": [
              9,
              10,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 1,
            },
          },
          {
            "span": [
              12,
              13,
            ],
            "type": "constant",
            "value": {
              "type": "int",
              "value": 2,
            },
          },
        ],
        "caller": {
          "name": "Tuple2",
          "namespace": "Tuple",
          "span": [
            8,
            14,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          14,
        ],
        "type": "application",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`parse unary ! expr 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        11,
      ],
      "value": {
        "args": [
          {
            "name": "b",
            "namespace": undefined,
            "span": [
              10,
              11,
            ],
            "type": "identifier",
          },
        ],
        "caller": {
          "name": "!",
          "span": [
            8,
            9,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          11,
        ],
        "type": "application",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > binding with identifier 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        28,
      ],
      "value": {
        "clauses": [
          [
            {
              "name": "a",
              "span": [
                18,
                19,
              ],
              "type": "identifier",
            },
            {
              "name": "res",
              "namespace": undefined,
              "span": [
                23,
                26,
              ],
              "type": "identifier",
            },
          ],
        ],
        "expr": {
          "name": "x",
          "namespace": undefined,
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          28,
        ],
        "type": "match",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > empty match expression 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        18,
      ],
      "value": {
        "clauses": [],
        "expr": {
          "name": "x",
          "namespace": undefined,
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          18,
        ],
        "type": "match",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > matching cons literal (syntax sugar) 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        35,
      ],
      "value": {
        "clauses": [
          [
            {
              "args": [
                {
                  "name": "hd",
                  "span": [
                    18,
                    20,
                  ],
                  "type": "identifier",
                },
                {
                  "name": "tl",
                  "span": [
                    24,
                    26,
                  ],
                  "type": "identifier",
                },
              ],
              "name": "Cons",
              "namespace": "List",
              "span": [
                18,
                26,
              ],
              "type": "constructor",
            },
            {
              "name": "res",
              "namespace": undefined,
              "span": [
                30,
                33,
              ],
              "type": "identifier",
            },
          ],
        ],
        "expr": {
          "name": "x",
          "namespace": undefined,
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          35,
        ],
        "type": "match",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > matching cons literal is right assoc 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        42,
      ],
      "value": {
        "clauses": [
          [
            {
              "args": [
                {
                  "name": "hd",
                  "span": [
                    18,
                    20,
                  ],
                  "type": "identifier",
                },
                {
                  "args": [
                    {
                      "name": "tl",
                      "span": [
                        24,
                        26,
                      ],
                      "type": "identifier",
                    },
                    {
                      "args": [],
                      "name": "Nil",
                      "namespace": undefined,
                      "span": [
                        30,
                        33,
                      ],
                      "type": "constructor",
                    },
                  ],
                  "name": "Cons",
                  "namespace": "List",
                  "span": [
                    24,
                    33,
                  ],
                  "type": "constructor",
                },
              ],
              "name": "Cons",
              "namespace": "List",
              "span": [
                18,
                33,
              ],
              "type": "constructor",
            },
            {
              "name": "res",
              "namespace": undefined,
              "span": [
                37,
                40,
              ],
              "type": "identifier",
            },
          ],
        ],
        "expr": {
          "name": "x",
          "namespace": undefined,
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          42,
        ],
        "type": "match",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > matching cons nested in tuple 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        41,
      ],
      "value": {
        "clauses": [
          [
            {
              "args": [
                {
                  "args": [
                    {
                      "name": "hd",
                      "span": [
                        19,
                        21,
                      ],
                      "type": "identifier",
                    },
                    {
                      "args": [],
                      "name": "Nil",
                      "namespace": undefined,
                      "span": [
                        25,
                        28,
                      ],
                      "type": "constructor",
                    },
                  ],
                  "name": "Cons",
                  "namespace": "List",
                  "span": [
                    19,
                    28,
                  ],
                  "type": "constructor",
                },
                {
                  "name": "y",
                  "span": [
                    30,
                    31,
                  ],
                  "type": "identifier",
                },
              ],
              "name": "Tuple2",
              "namespace": "Tuple",
              "span": [
                18,
                32,
              ],
              "type": "constructor",
            },
            {
              "name": "res",
              "namespace": undefined,
              "span": [
                36,
                39,
              ],
              "type": "identifier",
            },
          ],
        ],
        "expr": {
          "name": "x",
          "namespace": undefined,
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          41,
        ],
        "type": "match",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > matching constructor with no args 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        28,
      ],
      "value": {
        "clauses": [
          [
            {
              "args": [],
              "name": "X",
              "namespace": undefined,
              "span": [
                18,
                19,
              ],
              "type": "constructor",
            },
            {
              "name": "res",
              "namespace": undefined,
              "span": [
                23,
                26,
              ],
              "type": "identifier",
            },
          ],
        ],
        "expr": {
          "name": "x",
          "namespace": undefined,
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          28,
        ],
        "type": "match",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > matching constructor with one arg 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        31,
      ],
      "value": {
        "clauses": [
          [
            {
              "args": [
                {
                  "name": "a",
                  "span": [
                    20,
                    21,
                  ],
                  "type": "identifier",
                },
              ],
              "name": "X",
              "namespace": undefined,
              "span": [
                18,
                22,
              ],
              "type": "constructor",
            },
            {
              "name": "res",
              "namespace": undefined,
              "span": [
                26,
                29,
              ],
              "type": "identifier",
            },
          ],
        ],
        "expr": {
          "name": "x",
          "namespace": undefined,
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          31,
        ],
        "type": "match",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > matching float literals 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        30,
      ],
      "value": {
        "clauses": [
          [
            {
              "literal": {
                "type": "float",
                "value": 1.1,
              },
              "span": [
                18,
                21,
              ],
              "type": "lit",
            },
            {
              "name": "res",
              "namespace": undefined,
              "span": [
                25,
                28,
              ],
              "type": "identifier",
            },
          ],
        ],
        "expr": {
          "name": "x",
          "namespace": undefined,
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          30,
        ],
        "type": "match",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > matching int literals 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        29,
      ],
      "value": {
        "clauses": [
          [
            {
              "literal": {
                "type": "int",
                "value": 42,
              },
              "span": [
                18,
                20,
              ],
              "type": "lit",
            },
            {
              "name": "res",
              "namespace": undefined,
              "span": [
                24,
                27,
              ],
              "type": "identifier",
            },
          ],
        ],
        "expr": {
          "name": "x",
          "namespace": undefined,
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          29,
        ],
        "type": "match",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > matching many clauses, with trailing comma 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        44,
      ],
      "value": {
        "clauses": [
          [
            {
              "name": "a",
              "span": [
                18,
                19,
              ],
              "type": "identifier",
            },
            {
              "name": "ret_a",
              "namespace": undefined,
              "span": [
                23,
                28,
              ],
              "type": "identifier",
            },
          ],
          [
            {
              "name": "b",
              "span": [
                30,
                31,
              ],
              "type": "identifier",
            },
            {
              "name": "ret_b",
              "namespace": undefined,
              "span": [
                35,
                40,
              ],
              "type": "identifier",
            },
          ],
        ],
        "expr": {
          "name": "x",
          "namespace": undefined,
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          44,
        ],
        "type": "match",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > matching many clauses, without trailing comma 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        43,
      ],
      "value": {
        "clauses": [
          [
            {
              "name": "a",
              "span": [
                18,
                19,
              ],
              "type": "identifier",
            },
            {
              "name": "ret_a",
              "namespace": undefined,
              "span": [
                23,
                28,
              ],
              "type": "identifier",
            },
          ],
          [
            {
              "name": "b",
              "span": [
                30,
                31,
              ],
              "type": "identifier",
            },
            {
              "name": "ret_b",
              "namespace": undefined,
              "span": [
                35,
                40,
              ],
              "type": "identifier",
            },
          ],
        ],
        "expr": {
          "name": "x",
          "namespace": undefined,
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          43,
        ],
        "type": "match",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > matching qualified constructors 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        42,
      ],
      "value": {
        "clauses": [
          [
            {
              "args": [
                {
                  "name": "a",
                  "span": [
                    29,
                    30,
                  ],
                  "type": "identifier",
                },
                {
                  "name": "b",
                  "span": [
                    32,
                    33,
                  ],
                  "type": "identifier",
                },
              ],
              "name": "Constr",
              "namespace": "A/B",
              "span": [
                18,
                34,
              ],
              "type": "constructor",
            },
            {
              "span": [
                38,
                40,
              ],
              "type": "constant",
              "value": {
                "type": "int",
                "value": 42,
              },
            },
          ],
        ],
        "expr": {
          "name": "x",
          "namespace": undefined,
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          42,
        ],
        "type": "match",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > matching str literals 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        32,
      ],
      "value": {
        "clauses": [
          [
            {
              "literal": {
                "type": "string",
                "value": "abc",
              },
              "span": [
                18,
                23,
              ],
              "type": "lit",
            },
            {
              "name": "res",
              "namespace": undefined,
              "span": [
                27,
                30,
              ],
              "type": "identifier",
            },
          ],
        ],
        "expr": {
          "name": "x",
          "namespace": undefined,
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          32,
        ],
        "type": "match",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`pattern matching > matching tuples literal (syntax sugar) 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        33,
      ],
      "value": {
        "clauses": [
          [
            {
              "args": [
                {
                  "name": "x",
                  "span": [
                    19,
                    20,
                  ],
                  "type": "identifier",
                },
                {
                  "name": "y",
                  "span": [
                    22,
                    23,
                  ],
                  "type": "identifier",
                },
              ],
              "name": "Tuple2",
              "namespace": "Tuple",
              "span": [
                18,
                24,
              ],
              "type": "constructor",
            },
            {
              "name": "res",
              "namespace": undefined,
              "span": [
                28,
                31,
              ],
              "type": "identifier",
            },
          ],
        ],
        "expr": {
          "name": "x",
          "namespace": undefined,
          "span": [
            14,
            15,
          ],
          "type": "identifier",
        },
        "span": [
          8,
          33,
        ],
        "type": "match",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`pipe syntax sugar 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          9,
          10,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        5,
        25,
      ],
      "value": {
        "left": {
          "name": "a",
          "namespace": undefined,
          "span": [
            13,
            14,
          ],
          "type": "identifier",
        },
        "right": {
          "args": [
            {
              "name": "x",
              "namespace": undefined,
              "span": [
                20,
                21,
              ],
              "type": "identifier",
            },
            {
              "name": "y",
              "namespace": undefined,
              "span": [
                23,
                24,
              ],
              "type": "identifier",
            },
          ],
          "caller": {
            "name": "f",
            "namespace": undefined,
            "span": [
              18,
              19,
            ],
            "type": "identifier",
          },
          "span": [
            18,
            25,
          ],
          "type": "application",
        },
        "span": [
          13,
          25,
        ],
        "type": "pipe",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`pipe syntax sugar should be chainable 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          9,
          10,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        5,
        28,
      ],
      "value": {
        "left": {
          "left": {
            "name": "a",
            "namespace": undefined,
            "span": [
              13,
              14,
            ],
            "type": "identifier",
          },
          "right": {
            "args": [],
            "caller": {
              "name": "f",
              "namespace": undefined,
              "span": [
                18,
                19,
              ],
              "type": "identifier",
            },
            "span": [
              18,
              21,
            ],
            "type": "application",
          },
          "span": [
            13,
            21,
          ],
          "type": "pipe",
        },
        "right": {
          "args": [],
          "caller": {
            "name": "g",
            "namespace": undefined,
            "span": [
              25,
              26,
            ],
            "type": "identifier",
          },
          "span": [
            25,
            28,
          ],
          "type": "application",
        },
        "span": [
          13,
          28,
        ],
        "type": "pipe",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`pipe syntax sugar should handle qualified names 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "_",
        "span": [
          9,
          10,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        5,
        29,
      ],
      "value": {
        "left": {
          "name": "a",
          "namespace": "Mod",
          "span": [
            13,
            18,
          ],
          "type": "identifier",
        },
        "right": {
          "args": [
            {
              "name": "x",
              "namespace": undefined,
              "span": [
                24,
                25,
              ],
              "type": "identifier",
            },
            {
              "name": "y",
              "namespace": undefined,
              "span": [
                27,
                28,
              ],
              "type": "identifier",
            },
          ],
          "caller": {
            "name": "f",
            "namespace": undefined,
            "span": [
              22,
              23,
            ],
            "type": "identifier",
          },
          "span": [
            22,
            29,
          ],
          "type": "application",
        },
        "span": [
          13,
          29,
        ],
        "type": "pipe",
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`type declarations > many type params 1`] = `
{
  "declarations": [],
  "imports": [],
  "typeDeclarations": [
    {
      "name": "T",
      "params": [
        {
          "name": "a",
          "span": [
            7,
            8,
          ],
        },
        {
          "name": "b",
          "span": [
            10,
            11,
          ],
        },
        {
          "name": "c",
          "span": [
            13,
            14,
          ],
        },
      ],
      "pub": false,
      "span": [
        0,
        19,
      ],
      "type": "adt",
      "variants": [],
    },
  ],
}
`;

exports[`type declarations > single type param 1`] = `
{
  "declarations": [],
  "imports": [],
  "typeDeclarations": [
    {
      "name": "T",
      "params": [
        {
          "name": "a",
          "span": [
            7,
            8,
          ],
        },
      ],
      "pub": false,
      "span": [
        0,
        13,
      ],
      "type": "adt",
      "variants": [],
    },
  ],
}
`;

exports[`type declarations > trailing comma after variants 1`] = `
{
  "declarations": [],
  "imports": [],
  "typeDeclarations": [
    {
      "name": "T",
      "params": [],
      "pub": false,
      "span": [
        0,
        16,
      ],
      "type": "adt",
      "variants": [
        {
          "args": [],
          "name": "A",
          "span": [
            9,
            10,
          ],
        },
        {
          "args": [],
          "name": "B",
          "span": [
            12,
            13,
          ],
        },
      ],
    },
  ],
}
`;

exports[`type declarations > type with a variant with complex args 1`] = `
{
  "declarations": [],
  "imports": [],
  "typeDeclarations": [
    {
      "name": "T",
      "params": [],
      "pub": false,
      "span": [
        7,
        58,
      ],
      "type": "adt",
      "variants": [
        {
          "args": [
            {
              "args": [
                {
                  "ident": "a",
                  "span": [
                    34,
                    35,
                  ],
                  "type": "var",
                },
                {
                  "args": [
                    {
                      "args": [],
                      "name": "Int",
                      "span": [
                        44,
                        47,
                      ],
                      "type": "named",
                    },
                  ],
                  "name": "Nested",
                  "span": [
                    37,
                    48,
                  ],
                  "type": "named",
                },
              ],
              "name": "Example",
              "span": [
                26,
                49,
              ],
              "type": "named",
            },
          ],
          "name": "C",
          "span": [
            24,
            50,
          ],
        },
      ],
    },
  ],
}
`;

exports[`type declarations > type with a variant with no args 1`] = `
{
  "declarations": [],
  "imports": [],
  "typeDeclarations": [
    {
      "name": "T",
      "params": [],
      "pub": false,
      "span": [
        0,
        12,
      ],
      "type": "adt",
      "variants": [
        {
          "args": [],
          "name": "C",
          "span": [
            9,
            10,
          ],
        },
      ],
    },
  ],
}
`;

exports[`type declarations > type with a variant with no args 2`] = `
{
  "declarations": [],
  "imports": [],
  "typeDeclarations": [
    {
      "name": "T",
      "params": [],
      "pub": false,
      "span": [
        0,
        17,
      ],
      "type": "adt",
      "variants": [
        {
          "args": [
            {
              "args": [],
              "name": "Arg",
              "span": [
                11,
                14,
              ],
              "type": "named",
            },
          ],
          "name": "C",
          "span": [
            9,
            15,
          ],
        },
      ],
    },
  ],
}
`;

exports[`type declarations > type with many variants 1`] = `
{
  "declarations": [],
  "imports": [],
  "typeDeclarations": [
    {
      "name": "T",
      "params": [],
      "pub": false,
      "span": [
        0,
        15,
      ],
      "type": "adt",
      "variants": [
        {
          "args": [],
          "name": "A",
          "span": [
            9,
            10,
          ],
        },
        {
          "args": [],
          "name": "B",
          "span": [
            12,
            13,
          ],
        },
      ],
    },
  ],
}
`;

exports[`type declarations > type with no variants 1`] = `
{
  "declarations": [],
  "imports": [],
  "typeDeclarations": [
    {
      "name": "Never",
      "params": [],
      "pub": false,
      "span": [
        0,
        14,
      ],
      "type": "adt",
      "variants": [],
    },
  ],
}
`;

exports[`type hints > parses Fn type with args 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        25,
      ],
      "typeHint": {
        "args": [
          {
            "args": [],
            "name": "X",
            "span": [
              11,
              12,
            ],
            "type": "named",
          },
          {
            "args": [],
            "name": "Y",
            "span": [
              14,
              15,
            ],
            "type": "named",
          },
        ],
        "return": {
          "args": [],
          "name": "Z",
          "span": [
            20,
            21,
          ],
          "type": "named",
        },
        "span": [
          8,
          21,
        ],
        "type": "fn",
      },
      "value": {
        "span": [
          24,
          25,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`type hints > parses Fn type with no args 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        23,
      ],
      "typeHint": {
        "args": [],
        "return": {
          "args": [],
          "name": "Int",
          "span": [
            16,
            19,
          ],
          "type": "named",
        },
        "span": [
          8,
          19,
        ],
        "type": "fn",
      },
      "value": {
        "span": [
          22,
          23,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`type hints > parses a concrete type with no args as a type hint 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        15,
      ],
      "typeHint": {
        "args": [],
        "name": "Int",
        "span": [
          8,
          11,
        ],
        "type": "named",
      },
      "value": {
        "span": [
          14,
          15,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`type hints > parses concrete type with 1 arg 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        23,
      ],
      "typeHint": {
        "args": [
          {
            "args": [],
            "name": "Int",
            "span": [
              15,
              18,
            ],
            "type": "named",
          },
        ],
        "name": "Option",
        "span": [
          8,
          19,
        ],
        "type": "named",
      },
      "value": {
        "span": [
          22,
          23,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`type hints > parses concrete type with 2 args 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        29,
      ],
      "typeHint": {
        "args": [
          {
            "args": [],
            "name": "Int",
            "span": [
              15,
              18,
            ],
            "type": "named",
          },
          {
            "args": [],
            "name": "Bool",
            "span": [
              20,
              24,
            ],
            "type": "named",
          },
        ],
        "name": "Result",
        "span": [
          8,
          25,
        ],
        "type": "named",
      },
      "value": {
        "span": [
          28,
          29,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`type hints > parses type vars hints 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        13,
      ],
      "typeHint": {
        "ident": "a",
        "span": [
          8,
          9,
        ],
        "type": "var",
      },
      "value": {
        "span": [
          12,
          13,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;

exports[`type hints > parses underscore type 1`] = `
{
  "declarations": [
    {
      "binding": {
        "name": "x",
        "span": [
          4,
          5,
        ],
      },
      "extern": false,
      "pub": false,
      "span": [
        0,
        13,
      ],
      "typeHint": {
        "span": [
          8,
          9,
        ],
        "type": "any",
      },
      "value": {
        "span": [
          12,
          13,
        ],
        "type": "constant",
        "value": {
          "type": "int",
          "value": 0,
        },
      },
    },
  ],
  "imports": [],
  "typeDeclarations": [],
}
`;
