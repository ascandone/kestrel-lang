Program {
  MAIN
    = Import* (Declaration | TypeDeclaration)*

  Import
    = "import" NonemptyListOf<moduleName, "/"> ("." "{" NonemptyListOf<Exposing, ","> "}")?

  Exposing
    = (ident | infixIdent) -- value
    | typeIdent ("(" ".." ")")? -- type

  // --- Toplevel
  Declaration
    = "pub"? "let" ident (":" Type)? "=" Exp  -- letStmt
    | "extern" "pub"? "let" (ident | infixIdent) ":" Type -- externLetStmt

  TypeDeclaration
    = ("pub" "(..)"?)? "type" typeIdent ("<" NonemptyListOf<typeVar, ","> ">")? "{" ListOf<TypeVariant, ","> ","? "}" -- typeDef
    | "extern" "pub"? "type" typeIdent ("<" NonemptyListOf<typeVar, ","> ">")? -- externType

  // --- Expressions

  Exp
    = PipeExp

  PipeExp
    = PipeExp "|>" QualifiedName "(" ListOf<Exp, ","> ","? ")"  -- pipe
    | CompExp

  CompExp
    = CompExp "<" EqExpr -- lt
    | CompExp "<=" EqExpr -- lte
    | CompExp ">" EqExpr -- gt
    | CompExp ">=" EqExpr -- gte
    | EqExpr

  EqExpr
    = EqExpr "==" AndExpr -- eq
    | EqExpr "!=" AndExpr -- neq
    | AndExpr

  AndExpr
    = AndExpr "&&" AndExpr -- and
    | OrExpr

  OrExpr
    = OrExpr "||" ConsExpr -- or
    | ConsExpr

  ConsExpr
    = ConsExpr "::" ConsExpr -- cons
    | AddExp

  AddExp
    = AddExp "+" MulExp  -- plus
    | AddExp "+." MulExp  -- plusFloat
    | AddExp "-" MulExp  -- minus
    | AddExp "-." MulExp  -- minusFloat
    | AddExp "<>" MulExp  -- concat
    | MulExp

  MulExp
    = MulExp "*" ExpExp  -- mult
    | MulExp "*." ExpExp  -- multFloat
    | MulExp "/" ExpExp  -- divide
    | MulExp "/." ExpExp  -- divideFloat
    | MulExp "%" ExpExp  -- rem
    | ExpExp

  ExpExp
    = ExpExp "^" ExpExp  -- power
    | NotExp

  NotExp
    = "!" NotExp -- not
    | PriExp

  PriExp
    = "(" Exp ")"  -- paren
    | "(" Exp "," NonemptyListOf<Exp, ","> ")"  -- tuple // Tuples have 2+ elements
    | PriExp "(" ListOf<Exp, ","> ","? ")" -- apply
    | "{" BlockContent "}"  -- block
    | "fn" ListOf<ident, ","> "{" BlockContent "}"  -- fn
    | "if" Exp "{" BlockContent "}" "else" "{" BlockContent "}" -- if
    | "match" Exp "{" ListOf<MatchClause, ","> ","? "}" -- match
    | QualifiedName -- qualified
    | lit -- literal

  lit
    = number
    | string

  BlockContent
    = Exp  -- exp
    | "let#" QualifiedIdent ident "=" Exp ";" BlockContent -- monadicLet
    | "let" ident "=" Exp ";" BlockContent -- let

  ident
    = ~keyword identHead identBody*

  moduleName
    = upper alnum*

  QualifiedIdent
    = (Qualifier ".")? ident

  QualifiedTypeIdent
    = (Qualifier ".")? typeIdent

  QualifiedName
    = (Qualifier ".")? (ident | typeIdent)

  Qualifier
    = ListOf<moduleName, "/">

  identHead
    = lower
    | "_"
  
  identBody
    = alnum
    | "_"

  number
    = digit* "." digit+  -- fract
    | digit+             -- whole
    | "-" number  -- neg

  stringDelimiter = "\""
  string
    = stringDelimiter (~stringDelimiter any)* stringDelimiter

  keyword = "let" | "fn" | "if" | "else"

  // --- Pattern matching

  MatchClause
    = MatchPattern "=>" Exp -- clause

  MatchPattern
    = ConstructorPattern "::" MatchPattern -- cons
    | ConstructorPattern

  ConstructorPattern
    = ident  -- ident
    | lit -- lit
    | "(" MatchPattern "," NonemptyListOf<MatchPattern, ","> ")" -- tuple
    | typeIdent ("(" ListOf<MatchPattern, ","> ")")? -- constructor

  // --- Types

  TypeVariant
    = typeIdent ("(" ListOf<Type, ","> ")")?

  Type
    = QualifiedTypeIdent ("<" ListOf<Type, ","> ">")?  -- named
    | typeVar -- var
    | "Fn" "(" ListOf<Type, ","> ")" "->" Type -- fn
    | "_" -- any

  typeIdent
    = ~"Fn" typeIdentHead typeIdentBody*

  typeIdentHead
    = upper

  typeIdentBody
    = alnum

  typeVar
    = ~keyword typeVarHead typeVarBody*

  typeVarHead
    = lower
  
  typeVarBody
    = lower
    | digit
  
  infixIdent
    = "(" (~")" infixLetter)* ")"

  infixLetter
    = "+"
    | "-"
    | "*"
    | "/"
    | "^"
    | "="
    | ">"
    | "<"
    | "."
    | ":"
    | "!"
    | "%"
    | "&"
    | "|"

comment = "//" (~"\n" any)* "\n"

space += comment

}
