Program {
  MAIN
    = Declaration*

  Declaration
    = "let" ident "=" Exp  -- letStmt

  Exp
    = CompExp

  CompExp
    = CompExp "<" CompExp -- lt
    | CompExp "<=" CompExp -- lte
    | CompExp ">" CompExp -- gt
    | CompExp ">=" CompExp -- gte
    | EqExpr

  EqExpr
    = EqExpr "==" EqExpr -- eq
    | EqExpr "!=" EqExpr -- neq
    | AndExpr

  AndExpr
    = AndExpr "&&" AndExpr -- and
    | OrExpr

  OrExpr
    = OrExpr "||" OrExpr -- or
    | AddExp

  AddExp
    = AddExp "+" MulExp  -- plus
    | AddExp "-" MulExp  -- minus
    | MulExp

  MulExp
    = MulExp "*" ExpExp  -- times
    | MulExp "/" ExpExp  -- divide
    | MulExp "%" ExpExp  -- rem
    | ExpExp

  ExpExp
    = PriExp "^" ExpExp  -- power
    | PriExp

  PriExp
    = "(" Exp ")"  -- paren
    | PriExp "(" ListOf<Exp, ","> ")" -- apply
    | "{" BlockContent "}"  -- block
    | "fn" ListOf<ident, ","> "{" BlockContent "}"  -- fn
    | "if" Exp "{" BlockContent "}" "else" "{" BlockContent "}" -- if
    | ident -- ident
    | number

  BlockContent
    = Exp  -- exp
    | "let" ident "=" Exp ";" BlockContent -- let

  ident  (an identifier)
    = ~keyword identHead identBody*

  identHead
    = letter
    | "_"
  
  identBody
    = alnum
    | "_"
  

  number  (a number)
    = digit* "." digit+  -- fract
    | digit+             -- whole
    | "-" number  -- neg

  keyword = "let" | "fn" | "if" | "else"
}
